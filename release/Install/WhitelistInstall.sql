-- Script was generated by Devart dbForge Studio for MySQL, Version 5.0.97.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 10/12/2012 4:01:35 PM
-- Server version: 5.5.27
-- Client version: 4.1

--
-- Definition for database whitelist
--
DROP DATABASE IF EXISTS whitelist;
CREATE DATABASE IF NOT EXISTS whitelist
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

-- 
-- Set default database
--
USE whitelist;

--
-- Definition for table log
--
CREATE TABLE IF NOT EXISTS log(
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL,
  GUID VARCHAR(32) NOT NULL,
  `timestamp` DATETIME NOT NULL,
  logtype INT(11) UNSIGNED NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 521
AVG_ROW_LENGTH = 219
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table logtypes
--
CREATE TABLE IF NOT EXISTS logtypes(
  id INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  description VARCHAR(255) NOT NULL,
  PRIMARY KEY (id),
  UNIQUE INDEX description (description)
)
ENGINE = INNODB
AUTO_INCREMENT = 3
AVG_ROW_LENGTH = 8192
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Insert types into whitelist types
--
INSERT INTO whitelist.logtypes (description) VALUES ('Authorized Login');
INSERT INTO whitelist.logtypes (description) VALUES ('Kicked');

--
-- Definition for table whitelist
--
CREATE TABLE IF NOT EXISTS whitelist(
  id INT(11) NOT NULL AUTO_INCREMENT,
  identifier VARCHAR(255) NOT NULL COMMENT 'guid or IP',
  email VARCHAR(255) DEFAULT NULL,
  name VARCHAR(255) NOT NULL,
  whitelisted INT(1) UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 32
AVG_ROW_LENGTH = 585
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

DELIMITER $$

--
-- Definition for procedure proc_AddWhiteListed
--
CREATE DEFINER = 'dayz'@'localhost'
PROCEDURE proc_AddWhiteListed(IN p_name  VARCHAR(255),
                              IN p_email VARCHAR(255),
                              IN p_GUID  VARCHAR(128)
                              )
BEGIN
  INSERT INTO whitelist.whitelist (`identifier`, `email`, `name`) VALUES (p_GUID, p_email, p_name);
END
$$

--
-- Definition for procedure proc_CheckWhiteList
--
CREATE DEFINER = 'dayz'@'localhost'
PROCEDURE proc_CheckWhiteList(IN p_guid VARCHAR(32))
BEGIN
  SELECT *
  FROM
    whitelist
  WHERE
    whitelist.whitelist.identifier = p_guid
    AND whitelist.whitelist.whitelisted = 1;
END
$$

--
-- Definition for procedure proc_GetWhitelisted
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_GetWhitelisted()
BEGIN
  SELECT *
  FROM
    whitelist.whitelist;
END
$$

--
-- Definition for procedure proc_GetWhitelistLog
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_GetWhitelistLog()
BEGIN
  SELECT log.id
       , log.name
       , log.GUID
       , log.`timestamp`
       , logtypes.description AS type

  FROM
    whitelist.log
  INNER JOIN whitelist.logtypes
  ON log.logtype = logtypes.id

  GROUP BY
    GUID
  ORDER BY
    log.id DESC
  ;
END
$$

--
-- Definition for procedure proc_LogWhiteList
--
CREATE DEFINER = 'dayz'@'localhost'
PROCEDURE proc_LogWhiteList(IN p_name    VARCHAR(255),
                            IN p_GUID    VARCHAR(128),
                            IN p_logtype INT
                            )
BEGIN
  INSERT INTO whitelist.log (name, GUID, `timestamp`, logtype) VALUES (p_name, p_GUID, now(), p_logtype);
END
$$

--
-- Definition for procedure proc_SetWhitelistedStatus
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE proc_SetWhitelistedStatus(IN p_id          INT,
                                    IN p_whitelisted INT
                                    )
BEGIN
  UPDATE whitelist.whitelist
  SET
    whitelisted = p_whitelisted
  WHERE
    whitelist.id = p_id;
END
$$

DELIMITER ;